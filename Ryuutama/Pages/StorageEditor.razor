@page "/container"
@using System.ComponentModel.DataAnnotations;
@using static Ryuutama.Pages.Index.Storage;
@using static Ryuutama.Pages.Index;
@inject LocalStorageAccessor LocalStorage;


@if (ShowTitle)
{
    <h5 class="card-title">
        <div class="row">
            <div class="col">
                @if (EditName)
                {
                    <input type="text" value="@Storage.Name" @oninput="@(e => { Storage.Name = e.Value.ToString(); })" class="form-control" />
                }
                else
                {
                    @Storage.Name
                }
            </div>
            <div class="col">
                @if (AllowNameEdit)
                {
                    <button type="button" class="btn btn-primary" style="margin-left:10px;"
                    @onclick="@(async () => { EditName = !EditName; await OnChanged.InvokeAsync(Id);})">
                        @if (EditName)
                        {
                            <span class="oi oi-check" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        }
                    </button>
                    @if (!EditName)
                    {
                        <button type="button" class="btn btn-primary" style="margin-left:10px;" @onclick="@(async () => { await OnDelete.InvokeAsync(Id);})">
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </button>
                    }
                }
            </div>
        </div>
    </h5>
}


<div class="row">
    <label for="newCapacity" class="col-sm-2 col-form-label">Maximum Capacity:</label>
    <div class="col"><input @bind="Storage.Capacity" @bind:event="oninput" class="form-control" id="newCapacity" /> </div>
    <label for="currentSize" class="col-sm-2 col-form-label">Current Size:</label>
    <label for="currentSize" class="col-sm-2 col-form-label">@Storage.CurrentSize</label>
    <label for="remaining" class="col-sm-2 col-form-label">Remaining:</label>
    <label for="remaining" class="col-sm-2 col-form-label">@Storage.RemainingCapacity</label>
</div>

<table class="table table-sm">
    <thead class="thead-light">
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Size</th>
            <th scope="col">Value</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Storage.Items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Size</td>
                <td>@item.Value</td>
                <td>
                    <button @onclick="async () => {Storage.Items.Remove(item); await OnChanged.InvokeAsync(Id);}" class="btn btn-primary">
                        <span class="oi oi-x" aria-hidden="true"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<EditForm Model="@newItem" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">

        <div class="col"> <InputText id="newName" @bind-Value="newItem.NewName" class="form-control" placeholder="Name" /></div>
        <div class="col"><InputNumber @bind-Value="newItem.NewSize" class="form-control" placeholder="Size" /></div>
        <div class="col"><InputNumber @bind-Value="newItem.NewValue" class="form-control" placeholder="Value" /></div>
        <div class="col"><button type="submit" class="btn btn-primary"> <span class="oi oi-plus" aria-hidden="true"></span></button></div>

    </div>
</EditForm>


@code {
    [Parameter]
    public Storage Storage { get; set; }

    [Parameter]
    public bool AllowNameEdit { get; set; } = true;

    [Parameter]
    public bool ShowTitle { get; set; } = true;

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<string> OnChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    public bool EditName { get; set; } = false;

    private NewItem newItem = new();

    private async void HandleValidSubmit()
    {
        Storage.Items.Add(new Item()
            {
                Name = newItem.NewName,
                Size = newItem.NewSize,
                Value = newItem.NewValue
            });

        newItem.NewName = "";
        newItem.NewSize = 1;
        newItem.NewValue = 1;

        await OnChanged.InvokeAsync(Id);
    }

    public class NewItem
    {
        [Required]
        [StringLength(50, ErrorMessage = "Name is too long.", MinimumLength = 2)]
        public string? NewName { get; set; }

        [Required]
        public int NewSize { get; set; }

        [Required]
        public int NewValue { get; set; }
    }
}
