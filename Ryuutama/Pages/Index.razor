@page "/"
@inject LocalStorageAccessor LocalStorage;

<PageTitle>Item Sheet</PageTitle>

<h1>Item Sheet</h1>
<p>
    <label>
        Character Name:
        <input type="text" Value="@CharacterName" @onchange="@((ChangeEventArgs __e) => CharacterNameChanged(__e?.Value?.ToString()))" class="form-control" />
    </label>

    <label>
        Player Name:
        <input type="text" Value="@PlayerName" @onchange="@((ChangeEventArgs __e) => PlayerNameChanged(__e?.Value?.ToString()))" class="form-control" />
    </label>
</p>
<p>
    <label>
        Currency:
        <input type="text" Value="@Currency" @onchange="@((ChangeEventArgs __e) => CurrencyChanged(__e?.Value?.ToString()))" class="form-control" />
    </label>
</p>

<div style="max-width:1000px">
    <div class="m-3">
        <StorageEditor Storage="Inventory" AllowNameEdit="false" ShowTitle="false" OnChanged="@SaveChanges"></StorageEditor>
    </div>

    @foreach (var storage in Storages)
    {
        <div class="card mb-3">
            <div class="card-body">
                <StorageEditor Storage="storage" OnChanged="@SaveChanges" OnDelete="async () => {Storages.Remove(storage); await SaveChanges();}"></StorageEditor>
            </div>
        </div>
    }

</div>
<button @onclick="@AddNewBackpack" class="btn btn-primary">
    Add New Container
</button>

@code {

    protected override async Task OnInitializedAsync()
    {
        var inventory = await LocalStorage.GetValueAsync<Storage?>("Inv");
        if (inventory == null)
        {
            Inventory = inventory = new Storage()
                {
                    Name = "Inventory"
                };
            await SaveChanges();
        }
        else
        {
            Inventory = inventory;
        }
        var storages = await LocalStorage.GetValueAsync<List<Storage>?>("Storages");
        if (storages == null)
        {
            Storages = storages = new List<Storage>();
            await SaveChanges();
        }
        else
        {
            Storages = storages;
        }
        var characterName = await LocalStorage.GetValueAsync<string>("CharacterName");
        var playerName = await LocalStorage.GetValueAsync<string>("PlayerName");
        var currency = await LocalStorage.GetValueAsync<string>("Currency");

        CharacterName = characterName;
        PlayerName = playerName;
        Currency = currency;
    }

    public async Task AddNewBackpack()
    {
        Storages.Add(new Storage() { Name = "Backpack" });
        await SaveChanges();
    }

    public async Task SaveChanges()
    {
        await LocalStorage.SetValueAsync("Inv", Inventory);
        await LocalStorage.SetValueAsync("Storages", Storages);
        await LocalStorage.SetValueAsync("PlayerName", PlayerName);
        await LocalStorage.SetValueAsync("CharacterName", CharacterName);
        await LocalStorage.SetValueAsync("Currency", Currency);
    }

    public async Task DeleteStorage(Storage storage)
    {
        
    }

    public async Task CharacterNameChanged(string? value)
    {
        if (value == null)
        {
            value = "";
        }
        CharacterName = value;
        await SaveChanges();
    }

    public async Task PlayerNameChanged(string? value)
    {
        if (value == null)
        {
            value = "";
        }
        PlayerName = value;
        await SaveChanges();
    }

    public async Task CurrencyChanged(string? value)
    {
        if (value == null)
        {
            value = "";
        }
        Currency = value;
        await SaveChanges();
    }

    public List<Storage> Storages = new();

    public Storage Inventory = new();

    public string Currency { get; set; }

    public string PlayerName { get; set; }

    public string CharacterName { get; set; }

    public class Storage
    {
        public string Name { get; set; }

        public int Capacity { get; set; }

        public List<Item> Items { get; set; }

        public Storage()
        {
            Items = new();
        }

        public int RemainingCapacity
        {
            get
            {
                return Capacity - Items.Sum(x => x.Size);

            }
        }

        public int CurrentSize
        {
            get
            {
                return Items.Sum(x => x.Size);

            }
        }

        public class Item
        {
            public string Name { get; set; }
            public int Size { get; set; }
            public int Value { get; set; }
        }
    }
}